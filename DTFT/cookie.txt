#enumerate()生成带索引的迭代序列


# sys.argv中的第一个值（索引为0）是Python程序名（day1.py）,
默认为[],长度为1,从第二个值开始其他元素为字符串类型的控制台输入参数
#元组变长参数：*，适用于未知参数数量不固定，且函数使用这些参数时无须知道参数的名字的场合
#字典变长参数：**，适用于未知参数数量不固定，且函数使用这些参数时需要知道参数的名字的场合
#has_key() 为Python2 独有函数
#reduce python2函数


#自定义异常的编程方法是建立一个继承自系统异常的子类(MyError(Exception))并且在需要引发该异常时用raise语句抛出该异常(raise MyError())
#Python中类的构造函数用__init__命名
#构造函数在MyClass被实例化时被python解释器自动调用
#构造函数中不能有返回值
#用del释放对象时析构函数自动被调用(def __del__(self):)
#实例成员变量，类成员变量


#@staticmethod 静态函数可以直接通过类名访问类成员变量
#classmethod 类函数第一个参数必须为隐性参数cls,在类函数中
#可以用cls代替类名本身
#类中以'__'开始命名的成员都是私有成员,私有成员只能被类中函数访问
#子类函数用super关键字可以访问父类成员，引用方法为：
#super(SubClassName,self)
#Class Sub(BaseC, BaseB):  ->Sub BaseC BaseA(C继承A) BaseB
#URL标准形式： 
#[协议]://[域名/ip]:[端口号]/[路径]？[参数]&[参数]
#http://www.mysite.edu:80/app/search.html?page=1&name=david
#Client/Server Browser/Server
#socket为 应用程序屏蔽了TCP/IP网络传输层及以下的网络细节
#为操作系统的用户空间提供网络抽象
#socket使用IP地址+端口+协议的三元组唯一标识一个通信链路，可以对应多个客户端
#当主机上存在多个IP时，绑定地址0.0.0.0可以监听所有这些可用的IP


#HTML:超文本标记语言
# &nbsp  空格 <hr/> 横线 
#链接用<a>标签 href设置被跳转的URL,target设置在什么窗口打开链接
#图片用<img>表达
#src设置图片文件名，可以是绝对路径或者相对路径
#alt设置图片显示失败时替换的显示文字
#table tr td th
#无序列表：用<ul>表示列表，用<li>表示表项
#有序列表：用<ol>表示列表，用<li>表示表项
#定义列表：用<dl>表示列表，用<dt>表示被定义词，用<dd>表示定义描述
#bgcolor ：#FF0000 rgb(255,0,0) red
#<input type="radio" checked="checked"> 
#<select name="grade">/<option value="master">
#<input type="checkbox" name="sport">
#<input type="file" name="pic" accept=".png, .jpg, .gif">
#<fieldset>/<legend>
#CSS：内联 head内联 外联 默认
#通配(*) 标签(S) class(.value S.value) id(#value S#value)
#多(S1,S2) 子元素(S1>S2) 后代(S1 S2) 相邻(S1+S2)
#JavaScript:解释性语言 内部嵌入 外部链接 <script>
#区分大小写 ； {}
#在客户端读写HTML元素，实现切换文字、滚动条等动态效果
#响应浏览器事件，例如窗口变大、变小等
#验证表单输入，两次输入密码是否相同，出生年月是否小于当前时间等
# var new : var z = new Array()
#python 中Dictionary的‘键’是任意数据类型 dict[2]
#JavaScript中Dictionary的‘键’只能以成员变量的方式出现 obj.language
#且定义时键上不加双引号 var obj = {language='English', title='JS'}
#function A(m,n){...;}   A(x,y);
#if elseif else 
#switch case default break
#for (car i=;i++;i<1){...;}
#for (x in array){...;}
#while (expression){...;}
#do {...;}while(expression)
#DOM：页面文档对象模型


#查找节点
#getElementById(id):返回对拥有指定id的第一个对象的引用
#getElementByName(name):返回带有指定名称的对象集合
#getElementByTagName(tagName):返回带有指定标签名的对象集合
#obj.childNodes/firstchild/lastchild/nextSibling/ParentNode/previousSibling
#增加节点
#document.createElement()
#obj.appendChild()
#obj.insertBefore()
#obj.replaceChild()
#删除节点
#obj.removeChild()
#访问及修改属性节点
#obj.getAttribute()
#obj.setAttribute()
#访问及修改节点的内容
#obj.innerHTML

#window子对象：document、history、location、navigator、screen
#HTML事件处理： <tag onevent="javascript;" \>
#JQuary $(selector).action()

#标记内容操作
#.text() .html() .var() . attr("attr_name") .css("property_name")
#标记新增与删除
#.append() .prepend() .after() .before() .remove() .empty()

#事件响应
#$(selector).EVENT(function(){
	//事件处理代码
});
#JQuery特效
.hide()/.show() .toggle() .fadeIn()/.fadeOut() .fadeToggle()
.fadeTo(speed,opacity,callback)
.slideDown()/.slideUp() .slideToggle()
.animate({params},speed,callback)
.stop()

#E-R图： 实体 实体属性 关系
#关系表设计：1:1 1：N M：N
#SQL 结构化查询语言 关键字本身不区分大小写
#DDL 数据定义语言： 创建删除表结构的语言 Create Drop
#DCL 数据控制语言： 为定义数据访问及修改权限而实现的语句 Grant Revoke
#DQL 数据查询语言： 查询已有数据 select
#DML 数据操作语言： 对数据进行增、删、改的方法 Insert Delete Update
#TPL 事务处理语言： 保证多条语句的数据一致性 Commit Rollback
#CCL 指针控制语言： 对查到的多条记录进行逐行逐行控制的方法，及与Cursor相关的语句
#SQL条件操作符： =、<>、>、<、>=、<=、between、like、in、and、or、is null
#SQL常用汇总计算的聚集函数：
#COUNT(*) AVG(column) MAX(column) MIN(column) 
#VAR(column) FIRST(column) LAST(column)
#JOIN类型表 ：INNER/LEFT/RIGHT/FULL JOIN
#原子执行方式
# BEGIN TRANSACTION
# ROLLBACK
# COMMIT
#python数据库编程步骤：
#引入python引擎包
#连接数据库
#获取游标
#执行SQL命令
#提交或回滚事务
#关闭游标
#关闭数据库连接
#ORM 对象关系映射
#映射技术 CRUD操作 缓存优化

#WSGI接口 web server gateway interface
#一个是与Web服务器的接口
#一个与服务器端程序的接口
#Flask sqlalchemy Flask-WTForm
#render_template
#Markup 转换变量中的特殊字符 < > / 空格等
#app = Flask(__name__)
@app.route('/check')
#def f_check():
	abort(400)
#带变量的路由，HTTP方法绑定,路由地址方向生成
#路由变量映射类型: int float path(接受路径字符串)
#request是flask框架的一个全局对象，可以获取http请求的客户端相关信息
#test_request_context()

#datetime.now() :2018-05-21 07:31:07.265533
#time() :1526859168.1881096
#flask.session: new modified

#请求上下文中URL类型信息的使用
#base_url path script_root url url_root
#回调接入点
#before_request   请求处理前调用
#after_request    请求（未发生异常）处理后调用
#teardown_request   请求（可发生异常）处理后调用
#jinja2语法
#普通内容 变量 表达式 标签 注释 
#过滤器 | ()
#default abs attr capitalize dictsort escape first float format ...
#groupby indent int join last length list lower pprint random ...
#replace reverse roude safe slice string striptags sum title trim...
#truncate upper wordcount wordwrap

#测试函数
#allable defined divisibleby escaped even iterable lower none
#number odd sameas sequence string undefined upper
#for 循环块特殊变量
#loop.index loop.index0 loop.revindex loop.revindex0
#loop.first loop.last loop.length loop.cycle
#模板继承
#{%block content%} {%endblock%}
#{%extends 'base.html'%}
#SQLAlchemy
#定义表 定义数据库连接 进行增删改查等逻辑操作

#mysql 启动
#mysqld --skip-grant-tables
#mysql -u root -p